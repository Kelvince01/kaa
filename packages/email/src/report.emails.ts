import config from "@kaa/config/api";
import { formatNumber } from "@kaa/utils";
import emailService, { type EmailRecipient } from "./email.service";

export type PaymentStats = {
  count: number;
  totalAmount: number;
  averageAmount: number;
};

export type PropertyStats = {
  totalProperties: number;
  newProperties: number;
  availableProperties: number;
  unavailableProperties: number;
  propertyTypes: Array<{
    _id: string;
    count: number;
  }>;
};

export type UserStats = {
  totalUsers: number;
  newUsers: number;
  activeUsers: number;
  inactiveUsers: number;
};

export type LeaseStats = {
  totalLeases: number;
  newLeases: number;
  activeLeases: number;
  terminatedLeases: number;
  averageRent: number;
};

export type MonthlyReportData = {
  reportPeriod: string;
  paymentStats: PaymentStats;
  propertyStats: PropertyStats;
  userStats: UserStats;
  leaseStats: LeaseStats;
  logoUrl?: string;
  dashboardUrl?: string;
  currentYear?: number;
};

/**
 * Prepare template data with formatting
 */
export const prepareTemplateData = (
  data: MonthlyReportData
): MonthlyReportData => ({
  ...data,
  paymentStats: {
    ...data.paymentStats,
    totalAmount: formatNumber(data.paymentStats.totalAmount) as any,
    averageAmount: formatNumber(data.paymentStats.averageAmount) as any,
  },
  leaseStats: {
    ...data.leaseStats,
    averageRent: formatNumber(data.leaseStats.averageRent) as any,
  },
  logoUrl: data.logoUrl || `${config.clientUrl}/logo.png`,
  dashboardUrl: data.dashboardUrl || `${config.clientUrl}/dashboard`,
  currentYear: data.currentYear || new Date().getFullYear(),
});

/**
 * Generate plain text version of the report
 */
export const generatePlainText = (data: MonthlyReportData): string => {
  const formattedData = prepareTemplateData(data);

  return `
MONTHLY REPORT - ${data.reportPeriod}
=====================================

PAYMENT STATISTICS
------------------
Total Payments: ${data.paymentStats.count}
Total Amount: KES ${formattedData.paymentStats.totalAmount}
Average Payment: KES ${formattedData.paymentStats.averageAmount}

PROPERTY STATISTICS
-------------------
Total Properties: ${data.propertyStats.totalProperties}
New Properties: ${data.propertyStats.newProperties}
Available Properties: ${data.propertyStats.availableProperties}
Unavailable Properties: ${data.propertyStats.unavailableProperties}

Property Types:
${data.propertyStats.propertyTypes.map((type) => `- ${type._id}: ${type.count}`).join("\n")}

USER STATISTICS
---------------
Total Users: ${data.userStats.totalUsers}
New Users: ${data.userStats.newUsers}
Active Users: ${data.userStats.activeUsers}
Inactive Users: ${data.userStats.inactiveUsers}

LEASE STATISTICS
----------------
Total Leases: ${data.leaseStats.totalLeases}
New Leases: ${data.leaseStats.newLeases}
Active Leases: ${data.leaseStats.activeLeases}
Terminated Leases: ${data.leaseStats.terminatedLeases}
Average Rent: KES ${formattedData.leaseStats.averageRent}

---
This is an automated report generated by Kaa SaaS platform.
View your full dashboard: ${formattedData.dashboardUrl}
    `.trim();
};

/**
 * Send monthly report email to a recipient
 */
export const sendMonthlyReportEmail = async (
  data: MonthlyReportData & { email: string }
): Promise<boolean> => {
  const {
    reportPeriod,
    paymentStats,
    propertyStats,
    userStats,
    leaseStats,
    logoUrl,
    dashboardUrl,
    currentYear,
  } = prepareTemplateData(data);
  const text = generatePlainText(data);

  return await emailService.sendEmail({
    to: data.email,
    subject: `Monthly Report - ${reportPeriod}`,
    template: "monthly-report",
    context: {
      reportPeriod,
      paymentStats,
      propertyStats,
      userStats,
      leaseStats,
      logoUrl,
      dashboardUrl,
      year: currentYear,
    },
    text,
    headers: {
      "X-Report-Period": reportPeriod,
      "X-Report-Type": "monthly",
    },
    tags: [
      {
        name: "category",
        value: "monthly-report",
      },
      {
        name: "period",
        value: reportPeriod,
      },
    ],
  });
};

/**
 * Send monthly report to multiple recipients
 */
export async function sendToMultipleRecipients(
  recipients: EmailRecipient[],
  reportData: MonthlyReportData
): Promise<{
  successful: number;
  failed: number;
  results: Array<{ email: string; success: boolean; error?: string }>;
}> {
  const results: Array<{ email: string; success: boolean; error?: string }> =
    [];
  let successful = 0;
  let failed = 0;

  // Send emails in batches to avoid rate limiting
  const batchSize = 10;
  for (let i = 0; i < recipients.length; i += batchSize) {
    const batch = recipients.slice(i, i + batchSize);

    const batchPromises = batch.map(async (recipient) => {
      try {
        const success = await sendMonthlyReportEmail({
          ...reportData,
          email: recipient.email,
        });
        if (success) {
          successful++;
          results.push({ email: recipient.email, success: true });
        } else {
          failed++;
          results.push({
            email: recipient.email,
            success: false,
            error: "Send failed",
          });
        }
      } catch (error) {
        failed++;
        results.push({
          email: recipient.email,
          success: false,
          error: error instanceof Error ? error.message : "Unknown error",
        });
      }
    });

    await Promise.all(batchPromises);

    // Add delay between batches
    if (i + batchSize < recipients.length) {
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }
  }

  return { successful, failed, results };
}

/**
 * Send monthly report to all administrators
 */
export async function sendToAdministrators(
  reportData: MonthlyReportData
): Promise<{
  successful: number;
  failed: number;
  results: Array<{ email: string; success: boolean; error?: string }>;
}> {
  // This would typically fetch admin users from database
  // For now, using environment variable
  const adminEmails = process.env.ADMIN_EMAILS?.split(",") || [];

  const recipients: EmailRecipient[] = adminEmails.map((email) => ({
    email: email.trim(),
    name: "Administrator",
    role: "admin",
  }));

  if (recipients.length === 0) {
    console.warn("No administrator emails configured");
    return { successful: 0, failed: 0, results: [] };
  }

  return await sendToMultipleRecipients(recipients, reportData);
}

/**
 * Preview email HTML (for testing)
 */
export function generatePreview(_reportData: MonthlyReportData): string {
  // return this.generateEmailHtml(reportData);
  return "";
}

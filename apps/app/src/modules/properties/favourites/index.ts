/**
 * Property Favourites Module Exports
 *
 * This module provides comprehensive property favourites management functionality
 * including types, services, queries, and state management.
 */

// Export all query hooks
export {
  favouriteKeys,
  useAddFavourite,
  useAddPropertyToList,
  useAddToRecentlyViewed,
  useBulkFavouriteOperation,
  useClearAllFavourites,
  useClearRecentlyViewed,
  useCompareFavourites,
  useCreatePropertyList,
  useCreateSavedSearch,
  useCreateWatchList,
  useDeleteAlert,
  useDeleteSavedSearch,
  useDeleteWatchList,
  useExportFavourites,
  useFavourite,
  useFavouriteStats,
  useFavouriteStatus,
  useFavourites,
  useFavouriteTrends,
  useInvalidateFavourites,
  useMarkAlertAsRead,
  useMarkAllAlertsAsRead,
  useMarketInsights,
  useNotificationSettings,
  useOptimisticFavouriteToggle,
  usePrefetchFavourite,
  usePriceAlerts,
  usePropertiesByTaste,
  usePropertyAlerts,
  usePropertyLists,
  usePropertyRecommendations,
  useRecentlyViewed,
  useRemoveFavourite,
  useRemoveFromRecentlyViewed,
  useRemovePriceAlert,
  useRemovePropertyFromList,
  useRunSavedSearch,
  useSavedSearches,
  useSetPriceAlert,
  useShareFavourites,
  useSharePropertyList,
  useSimilarToFavourites,
  useToggleFavourite,
  useToggleWatchListStatus,
  useUpdateNotificationSettings,
  useUpdateSavedSearch,
  useUpdateWatchList,
  useWatchListMatches,
  useWatchLists,
} from "./favourite.queries";

// Export all service functions
export {
  addFavourite,
  addPropertyToList,
  addToRecentlyViewed,
  bulkFavouriteOperation,
  checkFavouriteStatus,
  clearAllFavourites,
  clearRecentlyViewed,
  compareFavourites,
  createPropertyList,
  createSavedSearch,
  createWatchList,
  deleteAlert,
  deleteSavedSearch,
  deleteWatchList,
  exportFavourites,
  getFavourite,
  getFavouriteStats,
  getFavourites,
  getFavouriteTrends,
  getMarketInsights,
  getNotificationSettings,
  getPriceAlerts,
  getPropertiesByTaste,
  getPropertyAlerts,
  getPropertyLists,
  getPropertyRecommendations,
  getRecentlyViewed,
  getSavedSearches,
  getSimilarToFavourites,
  getWatchListMatches,
  getWatchLists,
  markAlertAsRead,
  markAllAlertsAsRead,
  removeFavourite,
  removeFromRecentlyViewed,
  removePriceAlert,
  removePropertyFromList,
  runSavedSearch,
  setPriceAlert,
  shareFavourites,
  sharePropertyList,
  toggleFavourite,
  toggleWatchListStatus,
  updateNotificationSettings,
  updateSavedSearch,
  updateWatchList,
} from "./favourite.service";
// Export store and selectors
export {
  useCompareList,
  useCompareMode,
  useCurrentFavourite,
  useFavouriteFilters,
  useFavouriteForm,
  useFavouriteLoading,
  useFavouriteModal,
  useFavouriteModals,
  useFavouriteQueryParams,
  useFavouriteStore,
  useFavouriteViewMode,
  // useActiveFiltersCount,
  useFavouriteViewPreferences,
  useHasSelectedFavourites,
  useSelectedFavourites,
  useSelectedFavouritesCount,
  useSelectedProperties,
  useShowNotificationBadge,
  useUnreadAlertsCount,
  // useBulkActionLoading,
} from "./favourite.store";
// Export all types
export type {
  AddFavouriteInput,
  ApiResponse,
  BulkFavouriteOperation,
  CreateWatchListInput,
  Favourite,
  FavouriteComparison,
  FavouriteComparisonResponse,
  FavouriteExportOptions,
  FavouriteFilters,
  FavouriteListItem,
  FavouriteListResponse,
  FavouriteNotificationSettings,
  FavouriteQueryParams,
  FavouriteResponse,
  FavouriteShareOptions,
  FavouriteStats,
  FavouriteStatsResponse,
  FavouriteStatusResponse,
  Pagination,
  PropertyAlert,
  PropertyRecommendation,
  RecentlyViewed,
  RemoveFavouriteInput,
  SavedSearch,
  WatchListItem,
} from "./favourite.type";
